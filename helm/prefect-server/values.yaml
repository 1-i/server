# prefect-server configuration


# image is configuration for all prefect images
image:
  version: "latest"
  pullPolicy: IfNotPresent

# imagePullSecrets is configuration to reference the k8s Secret resources the
# Helm chart's pods can get credentials from to pull their images.
imagePullSecrets: []

# labels to merge into all object configurations
labels: {}

# matchLabels defines extra selection labels to merge into all  
# object configurations
matchLabels: {}

# annotations to merge into all object configurations
annotations: null

# fqdnSuffix determines the string appended to names when 
# determining the fully qualified domain name of services for 
# internal communication
fqdnSuffix: "svc.cluster.local"

# postgresql configures the backing database
# NOTE: the variables names must remain as is to match the
# bitnami subchart even if the bitnami subchart is not being
# used, these variables are used to create the connection 
# string
postgresql:
  postgresqlDatabase: prefect
  postgresqlUsername: prefect

  # existingSecret configures which secret should be referenced
  # for access to the database. If null and `useSubChart` is
  # enabled, the secret will be generated. If using an external
  # postgres service, this value should be set to a secret 
  # containing the key `postgresql-password`
  existingSecret: null

  # postgresqlPassword sets the password to be used if
  # `existingSecret` is not set. This is the password for 
  # `postgresqlUsername` and will be set within the secret at 
  # the key `postgresql-password`
  postgresqlPassword: password

  # servicePort configures the port that the database should be
  # accessed at
  servicePort: 5432

  # externalHostname defines the address to contact an externally
  # managed postgres database instance at. This is not required if
  # `internalPostgres` is `true`
  externalHostname: ""

  # useSubChart determines if a this chart should deploy a
  # user-manager postgres database or use an externally managed
  # postgres instance. If `useSubChart` is `true`, the
  # bitnami/postgresql subchart will be deployed
  useSubChart: true

  # postgresql configuration below here is only used if using
  # the subchart

  persistence:
    enabled: true
    size: 8Gi
  initdbUser: postgres
  initdbScripts:
    create_pgcrypto.sql: |
      -- create pgcrypto extension, required for UUID
      CREATE EXTENSION IF NOT EXISTS pgcrypto;
      CREATE EXTENSION IF NOT EXISTS "pg_trgm";
      SET TIME ZONE 'UTC';

# prefectConfig allows override of prefect_server/config.toml values
# Values placed here will result in environment variable definitions
# starting with "PREFECT_SERVER__" and will be passed to TODO
prefectConfig:
  env: "local"
  debug: "false"
  queued_runs_returned_limit: "25"
  hasura:
    execute_retry_seconds: "10"
  logging:
    level: "DEBUG"
    format: "[%(asctime)s] %(levelname)s - %(name)s | %(message)s"
  services:
    scheduler:
      scheduler_loop_seconds: "300"
    lazarus:
      resurrection_attempt_limit: "3"
  telemetry:
    enabled: "true"

hasura:
  port: 3000
  nameOverride: null
  image:
    repository: hasura/graphql-engine
    version: v1.3.0
    pullPolicy: null
    pullSecrets: []

  options:
    queryPlanCacheSize: "100"
  service:
    type: ClusterIP

  labels: {}
  annotations: {}
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

graphql:
  port: 4201
  containerPort: 3000

  image:
    repository: prefecthq/server
    version: null
    pullPolicy: null
    pullSecrets: []

  service:
    type: ClusterIP

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  init:
    resources: {}

towel:
  image:
    repository: prefecthq/server
    version: null
    pullPolicy: null
    pullSecrets: []

  service:
    type: ClusterIP

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

apollo:
  port: 4200
  image: 
    repository: prefecthq/apollo
    version: null
    pullPolicy: null
    pullSecrets: []
  options:
    telemetryEnabled: true
  service:
    type: LoadBalancer
    port: 4200

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  port: 8080
  image: 
    repository: prefecthq/ui
    version: null
    pullPolicy: null
    pullSecrets: []

  # apolloApiUrl defines the default gateway to the Apollo
  # GraphQL server. This location must be accessible by the
  # user of the API because the browser is making requests
  # (not the ui server)
  apolloApiUrl: http://localhost:4200/graphql

  service:
    type: LoadBalancer
    port: 8080

  labels: {}
  annotations: null
  replicaCount: 1
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

serviceAccount:
  # create specifies whether a service account should be created to manage
  # the prefect-server infrastructure
  create: true
  
  # name sets the name of the service account to use
  # If not set and create is true, a name is generated using the 
  # prefect-server.nameField template
  name: null


